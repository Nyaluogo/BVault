// <auto-generated />
using System;
using Bingi_Storage.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bingi_Storage.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250627035119_InitMig6")]
    partial class InitMig6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bingi_Storage.Models.Bet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BettingEventId")
                        .HasColumnType("int");

                    b.Property<int>("BettingMarketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OddsId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PotentialPayout")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Selection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BettingEventId");

                    b.HasIndex("BettingMarketId");

                    b.HasIndex("OddsId");

                    b.HasIndex("UserId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("Bingi_Storage.Models.BettingEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BettingEvents");
                });

            modelBuilder.Entity("Bingi_Storage.Models.BettingMarket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BettingMarkets");
                });

            modelBuilder.Entity("Bingi_Storage.Models.BettingOdds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("BettingOdds");
                });

            modelBuilder.Entity("Bingi_Storage.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Bingi_Storage.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Bingi_Storage.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PayType")
                        .HasColumnType("int");

                    b.Property<int?>("TransProvider")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Bingi_Storage.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgeRestriction")
                        .HasColumnType("int");

                    b.Property<decimal?>("AverageRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DownloadCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("FileSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBettingEnabled")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductPublishingStatus")
                        .HasColumnType("int");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SuspensionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SystemRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalRatings")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Version")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeRestriction = 18,
                            AverageRating = 4.5m,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Description = "This is a detailed description of the sample game.",
                            DownloadCount = 1000,
                            FileSize = 5.0m,
                            ImageUrl = "https://example.com/sample-game.jpg",
                            IsBettingEnabled = false,
                            Price = 29.99m,
                            ProductPublishingStatus = 0,
                            ShortDescription = "An exciting action game.",
                            SystemRequirements = "Windows 10 or higher",
                            Title = "BINGIMAN",
                            TotalRatings = 200,
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Version = 1.0m
                        },
                        new
                        {
                            Id = 2,
                            AgeRestriction = 18,
                            AverageRating = 4.5m,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Description = "This is a detailed description of the sample game.",
                            DownloadCount = 1000,
                            FileSize = 5.0m,
                            ImageUrl = "https://example.com/sample-game.jpg",
                            IsBettingEnabled = false,
                            Price = 29.99m,
                            ProductPublishingStatus = 0,
                            ShortDescription = "An exciting action game.",
                            SystemRequirements = "Windows 10 or higher",
                            Title = "Savage Gears",
                            TotalRatings = 200,
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Version = 1.0m
                        },
                        new
                        {
                            Id = 3,
                            AgeRestriction = 18,
                            AverageRating = 4.5m,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Description = "This is a detailed description of the sample game.",
                            DownloadCount = 1000,
                            FileSize = 5.0m,
                            ImageUrl = "https://example.com/sample-game.jpg",
                            IsBettingEnabled = false,
                            Price = 29.99m,
                            ProductPublishingStatus = 0,
                            ShortDescription = "An exciting action game.",
                            SystemRequirements = "Windows 10 or higher",
                            Title = "BINGIMAN 3",
                            TotalRatings = 200,
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Version = 1.0m
                        },
                        new
                        {
                            Id = 4,
                            AgeRestriction = 18,
                            AverageRating = 4.5m,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Description = "This is a detailed description of the sample game.",
                            DownloadCount = 1000,
                            FileSize = 5.0m,
                            ImageUrl = "https://example.com/sample-game.jpg",
                            IsBettingEnabled = false,
                            Price = 29.99m,
                            ProductPublishingStatus = 0,
                            ShortDescription = "An exciting strategy game.",
                            SystemRequirements = "Windows 10 or higher",
                            Title = "Debe",
                            TotalRatings = 200,
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Version = 1.0m
                        },
                        new
                        {
                            Id = 5,
                            AgeRestriction = 18,
                            AverageRating = 4.5m,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Description = "This is a detailed description of the sample game.",
                            DownloadCount = 1000,
                            FileSize = 5.0m,
                            ImageUrl = "https://example.com/sample-game.jpg",
                            IsBettingEnabled = false,
                            Price = 29.99m,
                            ProductPublishingStatus = 0,
                            ShortDescription = "An exciting racing game.",
                            SystemRequirements = "Windows 10 or higher",
                            Title = "Political Rally",
                            TotalRatings = 200,
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Version = 1.0m
                        },
                        new
                        {
                            Id = 6,
                            AgeRestriction = 18,
                            AverageRating = 4.5m,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Description = "This is a detailed description of the sample game.",
                            DownloadCount = 1000,
                            FileSize = 5.0m,
                            ImageUrl = "https://example.com/sample-game.jpg",
                            IsBettingEnabled = false,
                            Price = 29.99m,
                            ProductPublishingStatus = 0,
                            ShortDescription = "An exciting action game.",
                            SystemRequirements = "Windows 10 or higher",
                            Title = "Nafas",
                            TotalRatings = 200,
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Version = 1.0m
                        },
                        new
                        {
                            Id = 7,
                            AgeRestriction = 18,
                            AverageRating = 4.5m,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Description = "This is a detailed description of the sample game.",
                            DownloadCount = 1000,
                            FileSize = 5.0m,
                            ImageUrl = "https://example.com/sample-game.jpg",
                            IsBettingEnabled = false,
                            Price = 29.99m,
                            ProductPublishingStatus = 0,
                            ShortDescription = "An exciting action game.",
                            SystemRequirements = "Windows 10 or higher",
                            Title = "Political Fighter",
                            TotalRatings = 200,
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Version = 1.0m
                        },
                        new
                        {
                            Id = 8,
                            AgeRestriction = 18,
                            AverageRating = 4.5m,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Description = "This is a detailed description of the sample game.",
                            DownloadCount = 1000,
                            FileSize = 5.0m,
                            ImageUrl = "https://example.com/sample-game.jpg",
                            IsBettingEnabled = false,
                            Price = 29.99m,
                            ProductPublishingStatus = 0,
                            ShortDescription = "An exciting action game.",
                            SystemRequirements = "Windows 10 or higher",
                            Title = "Bingivision",
                            TotalRatings = 200,
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Version = 1.0m
                        },
                        new
                        {
                            Id = 9,
                            AgeRestriction = 18,
                            AverageRating = 4.5m,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Description = "This is a detailed description of the sample game.",
                            DownloadCount = 1000,
                            FileSize = 5.0m,
                            ImageUrl = "https://example.com/sample-game.jpg",
                            IsBettingEnabled = false,
                            Price = 29.99m,
                            ProductPublishingStatus = 0,
                            ShortDescription = "An exciting action game.",
                            SystemRequirements = "Windows 10 or higher",
                            Title = "Armed Rebellion",
                            TotalRatings = 200,
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Version = 1.0m
                        });
                });

            modelBuilder.Entity("Bingi_Storage.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PareentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PareentCategoryId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Action",
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Adventure",
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Racing",
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Strategy",
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Sport",
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Casual",
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Software",
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Bingi_Storage.Models.ProductMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BinaryUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMedia");
                });

            modelBuilder.Entity("Bingi_Storage.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PublicityStatus")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<decimal?>("RevenueShare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc),
                            Name = "Default Publisher",
                            PublicityStatus = 1,
                            UpdatedAt = new DateTime(2025, 6, 26, 16, 46, 50, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Bingi_Storage.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewPublishingStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Bingi_Storage.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayStatus")
                        .HasColumnType("int");

                    b.Property<int>("PayType")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Bingi_Storage.Models.UserLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserLibraries");
                });

            modelBuilder.Entity("Bingi_Storage.Models.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Bingi_Storage.Models.UserWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WalletStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserWallets");
                });

            modelBuilder.Entity("Bingi_Storage.Models.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductProductCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductProductCategory");
                });

            modelBuilder.Entity("Bingi_Storage.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfLastLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublisher")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("MyAccStatus")
                        .HasColumnType("int");

                    b.Property<int>("MyKycStatus")
                        .HasColumnType("int");

                    b.Property<string>("OtherName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Bingi_Storage.Models.Bet", b =>
                {
                    b.HasOne("Bingi_Storage.Models.BettingEvent", "BettingEvent")
                        .WithMany()
                        .HasForeignKey("BettingEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bingi_Storage.Models.BettingMarket", "BettingMarket")
                        .WithMany()
                        .HasForeignKey("BettingMarketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bingi_Storage.Models.BettingOdds", "Odds")
                        .WithMany()
                        .HasForeignKey("OddsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bingi_Storage.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BettingEvent");

                    b.Navigation("BettingMarket");

                    b.Navigation("Odds");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bingi_Storage.Models.Order", b =>
                {
                    b.HasOne("Bingi_Storage.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bingi_Storage.Models.Transaction", "OrderTransaction")
                        .WithOne("TransactionOrder")
                        .HasForeignKey("Bingi_Storage.Models.Order", "TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bingi_Storage.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderTransaction");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bingi_Storage.Models.OrderItem", b =>
                {
                    b.HasOne("Bingi_Storage.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bingi_Storage.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Bingi_Storage.Models.Product", b =>
                {
                    b.HasOne("Bingi_Storage.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Bingi_Storage.Models.ProductCategory", b =>
                {
                    b.HasOne("Bingi_Storage.Models.ProductCategory", "PareentCategory")
                        .WithMany()
                        .HasForeignKey("PareentCategoryId");

                    b.Navigation("PareentCategory");
                });

            modelBuilder.Entity("Bingi_Storage.Models.ProductMedia", b =>
                {
                    b.HasOne("Bingi_Storage.Models.Product", null)
                        .WithMany("ProductMedia")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bingi_Storage.Models.Transaction", b =>
                {
                    b.HasOne("Bingi_Storage.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bingi_Storage.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bingi_Storage.Models.UserWallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Bingi_Storage.Models.UserProfile", b =>
                {
                    b.HasOne("Bingi_Storage.Models.AppUser", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Bingi_Storage.Models.UserProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bingi_Storage.Models.UserWallet", b =>
                {
                    b.HasOne("Bingi_Storage.Models.AppUser", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProductCategory", b =>
                {
                    b.HasOne("Bingi_Storage.Models.ProductCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bingi_Storage.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bingi_Storage.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Bingi_Storage.Models.Product", b =>
                {
                    b.Navigation("ProductMedia");
                });

            modelBuilder.Entity("Bingi_Storage.Models.Transaction", b =>
                {
                    b.Navigation("TransactionOrder");
                });

            modelBuilder.Entity("Bingi_Storage.Models.AppUser", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Wallets");
                });
#pragma warning restore 612, 618
        }
    }
}
